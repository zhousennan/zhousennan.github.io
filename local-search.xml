<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>泛型的上下限</title>
    <link href="/2024/07/25/%E6%B3%9B%E5%9E%8B%E7%9A%84%E4%B8%8A%E4%B8%8B%E9%99%90/"/>
    <url>/2024/07/25/%E6%B3%9B%E5%9E%8B%E7%9A%84%E4%B8%8A%E4%B8%8B%E9%99%90/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-泛型的上限和下限详解"><a href="#Java-泛型的上限和下限详解" class="headerlink" title="Java 泛型的上限和下限详解"></a>Java 泛型的上限和下限详解</h1><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>Java 泛型是一种强大的特性，它允许类、接口和方法能够操作任何类型的对象，而不需要指定具体的类型。在泛型中，我们可以通过上限（Upper Bound）和下限（Lower Bound）来约束类型参数的范围，从而提高代码的类型安全性和灵活性。本文将详细介绍 Java 泛型上限和下限的概念，并通过丰富的示例代码来帮助理解和应用这些特性。</p><h2 id="泛型的基本概念"><a href="#泛型的基本概念" class="headerlink" title="泛型的基本概念"></a>泛型的基本概念</h2><p>首先，让我们简要回顾一下 Java 泛型的基本概念。泛型允许我们定义具有类型参数的类、接口和方法。例如，我们可以定义一个简单的泛型类 Box，它可以存储任何类型的对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Box</span>&lt;T&gt; &#123;<br>    <span class="hljs-keyword">private</span> T value;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(T value)</span> &#123;<br>    <span class="hljs-built_in">this</span>.value = value;<br>&#125;<br><br><span class="hljs-keyword">public</span> T <span class="hljs-title function_">getValue</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> value;<br>&#125;<br></code></pre></td></tr></table></figure><p>}</p><p>在上述代码中，T 是一个类型参数，可以在实例化 Box 类时指定具体的类型，例如 Box<Integer> 或 Box<String>。</String></Integer></p><h2 id="泛型的上限（Upper-Bound）"><a href="#泛型的上限（Upper-Bound）" class="headerlink" title="泛型的上限（Upper Bound）"></a>泛型的上限（Upper Bound）</h2><p>泛型的上限用于限制类型参数必须是某个特定类型或其子类型。我们使用关键字 extends 来指定上限。<br>示例：泛型类中的上限<br>假设我们希望创建一个只能接受 Number 类型及其子类的 Box 类，可以这样实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Box</span>&lt;T <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Number</span>&gt; &#123;<br>    <span class="hljs-keyword">private</span> T value;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(T value)</span> &#123;<br>    <span class="hljs-built_in">this</span>.value = value;<br>&#125;<br><br><span class="hljs-keyword">public</span> T <span class="hljs-title function_">getValue</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> value;<br>&#125;<br></code></pre></td></tr></table></figure><p>}</p><p>在这个例子中，类型参数 T 被限制为 Number 或其子类。因此，可以创建 Box<Integer> 或 Box<Double> 的实例，但不能创建 Box<String> 的实例。<br>示例：泛型方法中的上限<br>泛型方法也可以使用上限。例如，我们可以编写一个方法来计算数字列表的总和，该方法接受一个包含数字的列表，其元素类型受限于 Number 及其子类：</String></Double></Integer></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MathUtils</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Number</span>&gt; <span class="hljs-type">double</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(List&lt;T&gt; numbers)</span> &#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">total</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.0</span>;<br>        <span class="hljs-keyword">for</span> (T number : numbers) &#123;<br>            total += number.doubleValue();<br>        &#125;<br>        <span class="hljs-keyword">return</span> total;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="泛型的下限（Lower-Bound）"><a href="#泛型的下限（Lower-Bound）" class="headerlink" title="泛型的下限（Lower Bound）"></a>泛型的下限（Lower Bound）</h2><p>泛型的下限用于限制类型参数必须是某个特定类型或其父类型。我们使用关键字 super 来指定下限。<br>示例：泛型方法中的下限<br>假设我们希望创建一个方法，该方法可以向列表中添加整数，但列表的类型可以是 Integer 或其父类型（如 Number 或 Object）。可以这样实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CollectionUtils</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addIntegers</span><span class="hljs-params">(List&lt;? <span class="hljs-built_in">super</span> Integer&gt; list)</span> &#123;<br>        list.add(<span class="hljs-number">10</span>);<br>        list.add(<span class="hljs-number">20</span>);<br>        list.add(<span class="hljs-number">30</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在这个例子中，方法 addIntegers 接受一个 List&lt;? super Integer&gt; 类型的参数，这意味着列表可以包含 Integer 或任何 Integer 的父类型。<br>上限和下限的对比</p><p>上限（extends）：通常用于读取操作，可以确保从泛型对象中读取到指定类型或其子类型的对象。<br>下限（super）：通常用于写入操作，可以确保向泛型对象中添加指定类型或其父类型的对象。</p><p>上限和下限的组合使用<br>有时候，我们需要同时使用上限和下限来约束泛型类型。例如，我们可以创建一个方法，它既可以读取也可以写入一个泛型对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MixedUtils</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">copy</span><span class="hljs-params">(List&lt;? extends T&gt; source, List&lt;? <span class="hljs-built_in">super</span> T&gt; destination)</span> &#123;<br>        <span class="hljs-keyword">for</span> (T item : source) &#123;<br>            destination.add(item);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过掌握泛型的上限和下限，你可以编写出更灵活和类型安全的代码，从而提高程序的可维护性和可靠性。在实际开发中，合理使用泛型上限和下限可以解决许多复杂的类型转换和对象操作问题，使代码更加健壮和易于扩展。希望本文能帮助你更好地理解和应用 Java 泛型的上限和下限。</p>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>npm 常用命令</title>
    <link href="/2024/07/11/npm-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2024/07/11/npm-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h3 id="安装cnpm命令"><a href="#安装cnpm命令" class="headerlink" title="安装cnpm命令"></a>安装cnpm命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g cnpm --registry=https://registry.npmmirror.com<br></code></pre></td></tr></table></figure><h3 id="使用阿里定制的cnpm命令行工具代替默认的npm，输入以下代码"><a href="#使用阿里定制的cnpm命令行工具代替默认的npm，输入以下代码" class="headerlink" title="使用阿里定制的cnpm命令行工具代替默认的npm，输入以下代码"></a>使用阿里定制的cnpm命令行工具代替默认的npm，输入以下代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g cnpm --registry=https://registry.npmmirror.com<br><br></code></pre></td></tr></table></figure><h3 id="最新的配置淘宝镜像的淘宝官方提供的方法"><a href="#最新的配置淘宝镜像的淘宝官方提供的方法" class="headerlink" title="最新的配置淘宝镜像的淘宝官方提供的方法"></a>最新的配置淘宝镜像的淘宝官方提供的方法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm config <span class="hljs-built_in">set</span> registry https://registry.npmmirror.com<br></code></pre></td></tr></table></figure><h3 id="将npm的下载源恢复为默认的官方源，可以使用以下命令："><a href="#将npm的下载源恢复为默认的官方源，可以使用以下命令：" class="headerlink" title="将npm的下载源恢复为默认的官方源，可以使用以下命令："></a>将npm的下载源恢复为默认的官方源，可以使用以下命令：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm config <span class="hljs-built_in">set</span> registry https://registry.npmjs.org<br></code></pre></td></tr></table></figure><h3 id="使用以下命令来查看当前npm的下载源设置："><a href="#使用以下命令来查看当前npm的下载源设置：" class="headerlink" title="使用以下命令来查看当前npm的下载源设置："></a>使用以下命令来查看当前npm的下载源设置：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm config get registry<br></code></pre></td></tr></table></figure><h3 id="指定按照源install"><a href="#指定按照源install" class="headerlink" title="指定按照源install"></a>指定按照源install</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install  --registry=https://registry.npmmirror.com<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo使用教程</title>
    <link href="/2024/07/10/hexo%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <url>/2024/07/10/hexo%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>欢迎来到<a href="https://hexo.io/">Hexo</a>! </p><p>如果您在使用Hexo时遇到任何问题，可以在[故障排除]中找到答案(<a href="https://hexo.io/docs/troubleshooting.html)%E6%88%96%E8%80%85%E4%BD%A0%E5%8F%AF%E4%BB%A5%E5%9C%A8[GitHub]%E4%B8%8A%E9%97%AE%E6%88%91(https://github.com/hexojs/hexo/issues)">https://hexo.io/docs/troubleshooting.html)或者你可以在[GitHub]上问我(https://github.com/hexojs/hexo/issues)</a>.</p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="创建一个新文章"><a href="#创建一个新文章" class="headerlink" title="创建一个新文章"></a>创建一个新文章</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;文章名称&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server启动服务"><a href="#Run-server启动服务" class="headerlink" title="Run server启动服务"></a>Run server启动服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="发布到远程"><a href="#发布到远程" class="headerlink" title="发布到远程"></a>发布到远程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h3 id="生成静态文件并发布到远程"><a href="#生成静态文件并发布到远程" class="headerlink" title="生成静态文件并发布到远程"></a>生成静态文件并发布到远程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo g -d<br></code></pre></td></tr></table></figure><h3 id="图片引用的方法"><a href="#图片引用的方法" class="headerlink" title="图片引用的方法"></a>图片引用的方法</h3><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name">asset_img</span> test.png 图片引用方法一 %&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
